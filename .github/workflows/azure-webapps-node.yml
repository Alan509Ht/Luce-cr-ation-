# Objectifs du déploiement

Améliorer la gestion des commandes afin d’optimiser le processus de vente en ligne et de livraison à domicile.

Renforcer le suivi des livraisons pour garantir une meilleure expérience client.


2. Évaluation des besoins

Analyse des besoins :

Besoin d’un système de gestion des commandes qui centralise les informations des clients et des produits.

Outils pour automatiser les notifications de livraison et de suivi.

Formation pour le personnel sur les nouveaux outils.



3. Planification

Établir un calendrier de déploiement :

Phase 1 : Analyse et sélection des outils (Semaine 1-2)

Rechercher et choisir un logiciel de gestion des commandes.


Phase 2 : Mise en œuvre technique (Semaine 3-4)

Installer le logiciel et configurer les paramètres selon les besoins de Luce Création.


Phase 3 : Formation du personnel (Semaine 5)

Former le personnel sur l’utilisation du nouveau système.


Phase 4 : Lancement et suivi (Semaine 6)

Lancer le système et surveiller les performances.



Ressources nécessaires :

Personnel pour la formation et la mise en œuvre.

Logiciel de gestion des commandes.

Accès à Internet et matériel informatique (ordinateurs, imprimantes).



4. Formation

Former le personnel :

Plan de formation :

Formation sur l'utilisation du logiciel de gestion des commandes (2 sessions de 2 heures).

Formation sur la communication avec les clients concernant les commandes et livraisons.




5. Mise en œuvre

Déploiement technique :

Installer et configurer le logiciel choisi.

Tester le système pour s'assurer que tout fonctionne correctement avant le lancement officiel.


Tests :

Effectuer des tests avec des commandes fictives pour vérifier le bon fonctionnement du système.



6. Suivi et évaluation

Surveillance des performances :

Établir des indicateurs de performance clés (KPI) tels que le temps de traitement des commandes et le taux de satisfaction client.

Utiliser des outils d’analyse pour suivre les résultats.


Évaluation post-déploiement :

Planifier une réunion de retour d’expérience après 1 mois d’utilisation pour discuter des succès et des domaines d'amélioration.



7. Ajustements et améliorations

Recueillir les retours :

Mettre en place un système pour que le personnel puisse donner son avis sur le nouveau système et proposer des améliorations.


Planifier des améliorations :

En fonction des retours, ajuster le processus et le système pour mieux répondre aux besoins de l’entreprise.This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: your-app-name    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '20.x'                # set this to the node version to use

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: npm install, build, and test
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: node-app
        path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: node-app

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
